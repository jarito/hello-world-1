describe('The Lightning Data Service Testing', function(){
	
	describe("A test suite that tests the LDS", function() {
	
		var originalTimeout;
        var defaultTimeout = 10000;
		
        beforeEach(function(done) {
            originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;
            jasmine.DEFAULT_TIMEOUT_INTERVAL = defaultTimeout;

            // Create a record in advance, for use with the Save, Reload and Delete actions
            var that = this;
            $T.createComponent("c:MyContactRecord", {}, true)
            .then(function(component){
                that.component = component;
                component.set("v.isCallbackCalled", false); // the callback function will set this to true once it's called
                component.getNewRecord();
                return $T.waitFor(function(){
                    return component.get("v.isCallbackCalled") === true && component.get("v.record") != null;
                }, defaultTimeout);
            }).then(function() {
                done();
            }).catch(function(e) {
                done.fail(e);
            });
        });

        afterEach(function() {
            // Each spec (test) renders its components into the same div,
            // so we need to clear that div out at the end of each spec.
            $T.clearRenderedTestComponents();
            jasmine.DEFAULT_TIMEOUT_INTERVAL = originalTimeout;
        });
		
		it('loads a record and logs a success message when a record is reloaded', function(done) {
            var that = this;
            this.component.set("v.isCallbackCalled", false); // the callback function will set this to true once it's called
            this.component.reloadRecord();
            return $T.waitFor(function(){
                return that.component.get("v.isCallbackCalled") === true;
            }, defaultTimeout).then(function() {
                expect(that.component.find("logMessage").get("v.value")).toBe("Record has been loaded.");
                done();
            }).catch(function(e) {
                done.fail(e);
            });
        });
		
	});
	
});
